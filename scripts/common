#!/usr/bin/env bash
set -e

build_all()
{
    if [ "$#" = 0 ]; then
        set -- [0-9][0-9]*
    fi

    for i; do
        i="$(basename "$i")"
        IMAGE=${i##[0-9][0-9]-}
        IMAGE_NAME_VERSION="${REGISTRY}/${USERNAME}/${IMAGE}:${VERSION}"
        IMAGE_NAME_LATEST="${REGISTRY}/${USERNAME}/${IMAGE}:latest"

        cd "$i"
        if [ -e archs ] && ! grep -w -q "${ARCH}" archs; then
            echo "Skipping building image ${IMAGE_NAME_VERSION} for arch ${ARCH}, not supported arch"
            cd ..
            continue
        fi

        echo "Building image ${IMAGE_NAME_VERSION} for arch ${ARCH} version ${VERSION}"

        podman build --build-arg ARCH="${ARCH}" --build-arg VERSION="${VERSION}" -f "$(pwd)/Containerfile" -t "${IMAGE_NAME_VERSION}" .
        podman tag "${IMAGE_NAME_VERSION}" "${IMAGE_NAME_LATEST}"

        if [ -n "$(echo "${VERSION}" | grep "dirty")" ]; then
            echo "Skipping built image ${IMAGE_NAME_VERSION} push"
        else
            podman push "${IMAGE_NAME_VERSION}"
            podman push "${IMAGE_NAME_LATEST}"
        fi

        cd ..
    done
}

copy_all()
{
    OUTPUT="$1"
    shift

    if [ "$#" = 0 ]; then
        set -- [0-9][0-9]*
    fi

    for i; do
        i="$(basename "$i")"
        IMAGE=${i##[0-9][0-9]-}
        IMAGE_NAME_VERSION="${REGISTRY}/${USERNAME}/${IMAGE}:${VERSION}"

        cd "$i"
        if [ -e archs ] && ! grep -w -q "${ARCH}" archs; then
            echo "Skipping building image ${IMAGE_NAME_VERSION} for arch ${ARCH}, not supported arch"
            cd ..
            continue
        fi

        echo "Building image ${IMAGE_NAME_VERSION} for arch ${ARCH} version ${VERSION}"
        ID=$(podman create "${IMAGE_NAME_VERSION}")
        readlink -f "${OUTPUT}"

        rm -rf output
        podman cp "${ID}:/output" .
        podman rm -fv "${ID}"
        cp ./output/* "${OUTPUT}/"
        rm -rf ./output
        cd ..
    done
}
